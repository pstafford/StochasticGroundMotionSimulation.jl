var documenterSearchIndex = {"docs":
[{"location":"method_index/","page":"Method Index","title":"Method Index","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"method_index/","page":"Method Index","title":"Method Index","text":"","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"random_vibration_parameters/#Random-Vibration-Theory-Parameters","page":"Random Vibration Parameters","title":"Random Vibration Theory Parameters","text":"","category":"section"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"Definition of the custom type RandomVibrationParameters to represent the model components/approaches used for the random vibration theory calculations. In particular, the type stores symbols to define the:","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"excitation_duration model to use,\nrms_duration model to use, and\npeak_factor model to use.","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"  RandomVibrationParameters","category":"page"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.RandomVibrationParameters","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.RandomVibrationParameters","text":"RandomVibrationParameters\n\nStruct holding parameters/methods for Random Vibration Theory.\n\npf_method is the method used for peak factor computation\n\n- `:DK80` (default) is Der Kiureghian (1980), building on Vanmarcke (1975)\n- `:CL56` is Cartwright Longuet-Higgins (1956)\n\ndur_ex is the model for excitation duration\n\n- `:BT14` (default) is the Boore & Thompson (2014) model - note that this is adpated to work with `r_ps`\n\ndur_rms is the model for rms duration\n\n- `:BT12` is the Boore & Thompson (2012) model\n- `:BT15` (default) is the Boore & Thompson (2015) model\n\ndur_region is the region specified for the duration model\n\n- `:WNA` (default) is western North America\n- `:ENA` is eastern North America\n\n\n\n\n\n","category":"type"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"Note that the default specification is:","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"RandomVibrationParameters() = RandomVibrationParameters(:DK80, :BT14, :BT15, :WNA)","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"However, an alternative constructor exists that takes a pf_method as an argument. For this constructor, the rms_duration model is linked to the peak factor method:","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"DK80 is paired with :BT15 as a default\nCL56 is paired with :BT12 as a default","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"As these are currently the only two rms_duration models implemented, the constructor is specified as:","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"RandomVibrationParameters(pf) = RandomVibrationParameters(pf, :BT14, ((pf == :DK80) ? :BT15 : :BT12), :WNA)","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"In all cases, the Boore & Thompson (2014) excitation duration model is employed as that is the only model currently implemented.","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"##Â Functionality","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"The overall goal of these random vibration methods is to compute:","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"S_a = psi sqrt fracm_0D_rms","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"where psi is the peak factor computed from peak_factor, m_0 is the zeroth order spectral moment computed from spectral_moment, and D_rms is the root-mean-square duration computed from rms_duration.","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"The main methods used to interact with RandomVibrationParameters are:","category":"page"},{"location":"random_vibration_parameters/","page":"Random Vibration Parameters","title":"Random Vibration Parameters","text":"spectral_moment\nspectral_moments\nexcitation_duration\nrms_duration\npeak_factor\nrvt_response_spectral_ordinate\nrvt_response_spectrum","category":"page"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.spectral_moment","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.spectral_moment","text":"spectral_moment(order::Int, m::S, r_ps::T, fas::FourierParameters, sdof::Oscillator; nodes::Int=31, control_freqs::Vector{Float64}=[1e-3, 1e-1, 1.0, 10.0, 100.0, 300.0] ) where {S<:Real,T<:Real}\n\nCompute spectral moment of a specified order.\n\nEvaluates the expression:\n\n\tm_k = 2int_0^infty left(2pi fright)^k H(ff_nzeta_n)^2 A(f)^2 df\n\nwhere k is the order of the moment.\n\nIntegration is performed using Gauss-Legendre integration using nodes nodes and weights. The integration domain is partitioned over the control_freqs as well as two inserted frequencies at f_n/1.5 and f_n*1.5 in order to ensure good approximation of the integral around the sdof resonant frequency.\n\nSee also: spectral_moments\n\n\n\n\n\n","category":"function"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.spectral_moments","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.spectral_moments","text":"spectral_moments(order::Vector{Int}, m::S, r_ps::T, fas::FourierParameters, sdof::Oscillator; nodes::Int=31, control_freqs::Vector{Float64}=[1e-3, 1e-1, 1.0, 10.0, 100.0, 300.0] ) where {S<:Real,T<:Real}\n\nCompute a vector of spectral moments for the specified order.\n\nEvaluates the expression:\n\n\tm_k = 2int_0^infty left(2pi fright)^k H(ff_nzeta_n)^2 A(f)^2 df\n\nfor each order, where k is the order of the moment.\n\nIntegration is performed using Gauss-Legendre integration using nodes nodes and weights. The integration domain is partitioned over the control_freqs as well as two inserted frequencies at f_n/1.5 and f_n*1.5 in order to ensure good approximation of the integral around the sdof resonant frequency.\n\nSee also: spectral_moment, spectral_moments_gk\n\n\n\n\n\n","category":"function"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.excitation_duration","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.excitation_duration","text":"excitationduration(m, rps::U, src::SourceParameters{S,T}, rvt::RandomVibrationParameters) where {S<:Float64,T<:Real,U<:Real}\n\nGeneric function implementing excitation duration models.\n\nCurrently, only the Boore & Thompson (2014) model is implemented.\n\n\n\n\n\n","category":"function"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.rms_duration","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.rms_duration","text":"rms_duration(m::S, r_ps::T, src::SourceParameters, sdof::Oscillator, rvt::RandomVibrationParameters) where {S<:Float64,T<:Real}\n\nReturns a 3-tuple of (Drms, Dex, Dratio), using a switch on rvt.dur_rms. Default :BT12 makes use of the :BT14 model for excitation duration, Dex.\n\nm is magnitude\nr_ps is an equivalent point source distance\n\n\n\n\n\n","category":"function"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.peak_factor","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.peak_factor","text":"peak_factor(m::S, r_ps::T, fas::FourierParameters, sdof::Oscillator; pf_method::Symbol=:DK80) where {S<:Real,T<:Real}\n\nPeak factor u_max  u_rms with a switch of pf_method to determine the approach adopted. pf_method can currently be one of: \t- :CL56 for Cartright Longuet-Higgins (1956) \t- :DK80 for Der Kiureghian (1980), building on Vanmarcke (1975)\n\nDefaults to :DK80.\n\n\n\n\n\npeak_factor(m::S, r_ps::T, Dex::U, m0::V, fas::FourierParameters, sdof::Oscillator, rvt::RandomVibrationParameters) where {S<:Real,T<:Real,U<:Real,V<:Real}\n\nPeak factor umax / urms with a switch of pf_method to determine the approach adopted. pf_method can currently be one of: \t- :CL56 for Cartright Longuet-Higgins (1956) \t- :DK80 for Der Kiureghian (1980), building on Vanmarcke (1975)\n\nDefaults to :DK80.\n\n\n\n\n\n","category":"function"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.rvt_response_spectral_ordinate","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.rvt_response_spectral_ordinate","text":"rvt_response_spectral_ordinate(m::S, r_ps::T, fas::FourierParameters, sdof::Oscillator, rvt::RandomVibrationParameters) where {S<:Real,T<:Real}\n\nResponse spectral ordinate (units of g) for the specified scenario.\n\nThe spectral ordinate is computed using the expression:\n\nS_a = psi sqrtfracm_0D_rms\n\nwhere psi is the peak factor computed from peak_factor, m_0 is the zeroth order spectral moment from spectral_moment, and D_rms is the RMS duration computed from rms_duration.\n\nSee also: rvt_response_spectral_ordinate, rvt_response_spectrum, rvt_response_spectrum!\n\n\n\n\n\nrvt_response_spectral_ordinate(period::U, m::S, r_ps::T, fas::FourierParameters, rvt::RandomVibrationParameters) where {S<:Real,T<:Real,U<:Float64}\n\nResponse spectral ordinate (units of g) for the specified scenario.\n\nThe spectral ordinate is computed using the expression:\n\nS_a = psi sqrtfracm_0D_rms\n\nwhere psi is the peak factor computed from peak_factor, m_0 is the zeroth order spectral moment from spectral_moment, and D_rms is the RMS duration computed from rms_duration.\n\nSee also: rvt_response_spectral_ordinate, rvt_response_spectrum, rvt_response_spectrum!\n\n\n\n\n\n","category":"function"},{"location":"random_vibration_parameters/#StochasticGroundMotionSimulation.rvt_response_spectrum","page":"Random Vibration Parameters","title":"StochasticGroundMotionSimulation.rvt_response_spectrum","text":"rvt_response_spectrum(period::Vector{U}, m::S, r_ps::T, fas::FourierParameters, rvt::RandomVibrationParameters) where {S<:Real,T<:Real,U<:Float64}\n\nResponse spectrum (units of g) for the vector of periods period and the specified scenario.\n\nEach spectral ordinate is computed using the expression:\n\nS_a = psi sqrtfracm_0D_rms\n\nwhere psi is the peak factor computed from peak_factor, m_0 is the zeroth order spectral moment from spectral_moment, and D_rms is the RMS duration computed from rms_duration. The various terms are all functions of the oscillator period.\n\nSee also: rvt_response_spectral_ordinate, rvt_response_spectrum!\n\n\n\n\n\n","category":"function"},{"location":"fourier_spectrum/","page":"Fourier Amplitude Spectrum","title":"Fourier Amplitude Spectrum","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"fourier_spectrum/#Fourier-Amplitude-Spectrum","page":"Fourier Amplitude Spectrum","title":"Fourier Amplitude Spectrum","text":"","category":"section"},{"location":"fourier_spectrum/","page":"Fourier Amplitude Spectrum","title":"Fourier Amplitude Spectrum","text":"The Fourier amplitude spectrum (FAS) can be represented as the product of source, path and site contributions.","category":"page"},{"location":"fourier_spectrum/","page":"Fourier Amplitude Spectrum","title":"Fourier Amplitude Spectrum","text":"Specifically, the Fourier amplitude spectrum A(f) of acceleration (in units of m/s) is defined as:","category":"page"},{"location":"fourier_spectrum/","page":"Fourier Amplitude Spectrum","title":"Fourier Amplitude Spectrum","text":"A(f bmtheta) = E(f bmtheta_E)times P(f bmtheta_P) times S(f bmtheta_S)","category":"page"},{"location":"fourier_spectrum/","page":"Fourier Amplitude Spectrum","title":"Fourier Amplitude Spectrum","text":"where f is a frequency in Hz, and bmtheta holds all of the relevant model parameters and predictor variables. The Fourier Source Spectrum, E(f bmtheta_E) is a function of the earthquake magnitude m, as well as other properties of the source. The Path Scaling, P(f bmtheta_P) accounts for the effects of both geometric spreading and anelastic attenuation. The Site Scaling, S(f bmtheta_S) includes the effects of near-surface impedance as well as damping (kappa_0) effects.","category":"page"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"site_scaling/#Site-Scaling","page":"Site scaling","title":"Site Scaling","text":"","category":"section"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"Site response is defined in terms of site amplification, or impedance effects, as well as damping â via a kappa filter.","category":"page"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"The overall site model is therefore written as: S(f bmtheta_S) = S_I(f) times S_K(f) with S_I(f) representing the impedance effects, and S_K(f) being the kappa filter.","category":"page"},{"location":"site_scaling/#Impedance-functions","page":"Site scaling","title":"Impedance functions","text":"","category":"section"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"Currently, three impedance functions are implemented:","category":"page"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":":Boore2016: is the Boore (2016) impedance function for a Western US generic rock profile with V_S30=760 m/s\n:AlAtik2021_cy14: is the Al Atik & Abrahamson (2021) impedance function obtained by inverting the Chiou & Youngs (2014) GMM. The reference profile has a V_S30=760 m/s\n:Unit: simply provides a unit impedance for all frequencies, i.e., S_I(f)=10","category":"page"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"site_amplification","category":"page"},{"location":"site_scaling/#StochasticGroundMotionSimulation.site_amplification","page":"Site scaling","title":"StochasticGroundMotionSimulation.site_amplification","text":"site_amplification(f::Real, amp_model::Symbol)\n\nComputes the site amplification (impedance) for a given frequency f. Requires the keyword argument amp_model as a String and defaults to the Boore (2016) model. Currently, any other string passed to the function will return the unit amplification\n\n#Â Examples\n\n\tf = 5.0\n\t#Â returns the amplification from AlAtik (2021) in both cases\n\tAf = site_amplification(f)\n    Af = site_amplification(f; amp_model=:AlAtik2021_cy14_760)\n    # returns the Boore (2016) amplification\n\tAf = site_amplification(f; amp_model=:Boore2016)\n\t#Â returns 1.0\n\tAf = site_amplification(f; amp_model=:Unit)\n\n\n\n\n\nsite_amplification(f, site::SiteParameters)\n\nComputes the site amplification (impedance) for a given frequency f.\n\n\n\n\n\nsite_amplification(f, fas::FourierParameters)\n\nComputes the site amplification (impedance) for a given frequency f.\n\n\n\n\n\n","category":"function"},{"location":"site_scaling/#Kappa-filter","page":"Site scaling","title":"Kappa filter","text":"","category":"section"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"In addition to the impedance effects, the near surface damping is represented by a generic kappa filter:","category":"page"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"S_K(f) = expleft( -pi kappa_0 f right)","category":"page"},{"location":"site_scaling/","page":"Site scaling","title":"Site scaling","text":"kappa_filter","category":"page"},{"location":"site_scaling/#StochasticGroundMotionSimulation.kappa_filter","page":"Site scaling","title":"StochasticGroundMotionSimulation.kappa_filter","text":"kappa_filter(f, site::SiteParameters)\n\nKappa filter for a given frequency f\n\n\n\n\n\n","category":"function"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"source_spectrum/#Fourier-Source-Spectrum","page":"Source spectrum","title":"Fourier Source Spectrum","text":"","category":"section"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":"The source spectrum can be computed through interaction with the SourceParameters type, or the higher level FourierParameters type that holds a SourceParameters instance as a property.","category":"page"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":"The source spectrum E(f bmthetaE) is most commonly written in terms of:","category":"page"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":"  E(f bmtheta_E) = mathcalC M_0 E_s(f bmtheta_E)","category":"page"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":"where mathcalC is a constant term, to be defined shortly, M_0 is the seismic moment, and E_s(f bmtheta_E) is the source spectral shape.","category":"page"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":"The most commonly adopted source spectral shape is the omega^2 model that has the form:","category":"page"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":" E_s(f) = frac11 + left(fracff_cright)^2","category":"page"},{"location":"source_spectrum/#Functionality","page":"Source spectrum","title":"Functionality","text":"","category":"section"},{"location":"source_spectrum/","page":"Source spectrum","title":"Source spectrum","text":"fourier_constant\nfourier_source_shape\nfourier_source\ncorner_frequency\nmagnitude_to_moment","category":"page"},{"location":"source_spectrum/#StochasticGroundMotionSimulation.fourier_constant","page":"Source spectrum","title":"StochasticGroundMotionSimulation.fourier_constant","text":"fourier_constant(src::SourceParameters)\n\nDefine the constant source term for the Fourier Amplitude Spectrum. Constant set to permit distances to be passed in km, densities in t/m^3, and velocities in km/s The reference distance is set to 1.0 km (and interpreted to be a rupture distance).\n\n\n\n\n\n","category":"function"},{"location":"source_spectrum/#StochasticGroundMotionSimulation.fourier_source_shape","page":"Source spectrum","title":"StochasticGroundMotionSimulation.fourier_source_shape","text":"fourier_source_shape(f::T, m::S, src::SourceParameters) where {S<:Real,T<:Float64}\n\nSource shape of the Fourier Amplitude Spectrum of displacement, without the constant term or seismic moment. This simply includes the source spectral shape.\n\n\n\n\n\nfourier_source_shape(f, m, fas::FourierParameters)\n\nSource shape of the Fourier amplitude spectrum of displacement, without the constant term or seismic moment. Defined using a FourierParameters instance for the source model.\n\nSee also: fourier_source_shape\n\n\n\n\n\nfourier_source_shape(f::Float64, fa::T, fb::T, Îµ::T, model::Symbol) where T<:Real\n\nFourier amplitude spectral shape for displacement defined by corner frequencies.\n\nSee also: fourier_source_shape\n\n\n\n\n\n","category":"function"},{"location":"source_spectrum/#StochasticGroundMotionSimulation.fourier_source","page":"Source spectrum","title":"StochasticGroundMotionSimulation.fourier_source","text":"fourier_source(f::T, m::S, src::SourceParameters) where {S<:Real,T<:Float64}\n\nSource Fourier Amplitude Spectrum of displacement, without the constant term. This simply includes the seismic moment and the source spectral shape.\n\nSee also: fourier_source_shape\n\n\n\n\n\nfourier_source(f, m, fas::FourierParameters)\n\nSource Fourier Amplitude Spectrum of displacement, without the constant term. This simply includes the seismic moment and the source spectral shape. Defined using a FourierParameters instance for the source model.\n\nSee also: fourier_source_shape\n\n\n\n\n\n","category":"function"},{"location":"source_spectrum/#StochasticGroundMotionSimulation.corner_frequency","page":"Source spectrum","title":"StochasticGroundMotionSimulation.corner_frequency","text":"corner_frequency(m::U, src::SourceParameters{S,T}) where {S<:Float64, T<:Real, U<:Real}\n\nComputes a 3-tuple of corner frequency components, depending upon source spectrum type. By default the single-corner Brune spectrum is considered, but if src.model equals :Atkinson_Silva_2000 then the components of the double-corner spectrum are returned. If some other symbol is passed then the Brune model is returned.\n\nExamples\n\n    m = 6.0\n    ÎÏ = 100.0\n    Îº0 = 0.035\n    fas = FASParams(ÎÏ, Îº0)\n    #Â compute single corner frequency\n\tsrc.model = :Brune\n    fc, tmp1, tmp2 = corner_frequency(m, src)\n    #Â compute double corner frequencies\n\tsrc.model = :Atkinson_Silva_2000\n    fa, fb, Îµ = corner_frequency(m, src)\n\n\n\n\n\n","category":"function"},{"location":"source_spectrum/#StochasticGroundMotionSimulation.magnitude_to_moment","page":"Source spectrum","title":"StochasticGroundMotionSimulation.magnitude_to_moment","text":"magnitude_to_moment(m::T) where T<:Real\n\nConverts moment magnitude to seismic moment (in dyne-cm).\n\n#Â Examples\n\n\tm = 6.0\n\tM0 = magnitude_to_moment(m)\n\n\n\n\n\n","category":"function"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"path_scaling/#Path-Scaling","page":"Path scaling","title":"Path Scaling","text":"","category":"section"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"The path scaling can be broken into geometric spreading â including the effects of near-source saturation â and anelastic attenuation. Within StochasticGroundMotionSimulation the PathParameters type holds custom structs that relate to each of these three components:","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"GeometricSpreadingParameters defines the geometric spreading model (spreading rates, transition distances, and functional scaling)\nNearSourceSaturationParameters defines the near-source saturation model, or the finite fault factors\nAnelasticAttenuationParameters defines the properties of the anelastic attenuation model.","category":"page"},{"location":"path_scaling/#Geometric-Spreading","page":"Path scaling","title":"Geometric Spreading","text":"","category":"section"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"Parameters for representing geometric spreading are contained within a GeometricSpreadingParameters instance. To compute the actual geometric spreading for a given distance we make use of the geometric_spreading function:","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"geometric_spreading","category":"page"},{"location":"path_scaling/#StochasticGroundMotionSimulation.geometric_spreading","page":"Path scaling","title":"StochasticGroundMotionSimulation.geometric_spreading","text":"geometric_spreading(r_ps::T, m::S, geo::GeometricSpreadingParameters, sat::NearSourceSaturationParameters) where {S<:Real, T<:Real}\n\nGeometric spreading function, switches between different approaches on path.geo_model.\n\n\n\n\n\n","category":"function"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"This function takes different options that define different spreading functions. For example, the :CY14 option uses the functional form of Chiou & Youngs (2014), but uses an equivalent point-source distance throughout.","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"  ln g(r_ps) = -gamma_1 ln(r_ps) + fracleft(gamma_1 -gamma_fright)2 lnleft( frac r_ps^2 + r_t^2 r_0^2 + r_t^2 right)","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"The alternative :CY14mod option combines a point-source distance in the near field, with r_rup scaling in the far field.","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"ln g(r_psr_rup) = -gamma_1 ln(r_ps) + fracleft(gamma_1 -gamma_fright)2 lnleft( frac r_rup^2 + r_t^2 r_0^2 + r_t^2 right)","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"In both of the above cases, the r_0 term is the reference distance that is used to define the source spectral amplitude.","category":"page"},{"location":"path_scaling/#Near-Source-Saturation","page":"Path scaling","title":"Near Source Saturation","text":"","category":"section"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"The NearSourceSaturationParameters are crucial for computing the equivalent point-source distance metric. Generally, the equivalent point-source distance can be computed via:","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"  r_ps = left( r_rup^n + h(bmM)^n right)^1n","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"and it is most common to follow Boore & Thompson (2015) and to use n=2 so that:","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"  r_ps = sqrt r_rup^2 + h(bmM)^2 ","category":"page"},{"location":"path_scaling/#Functionality","page":"Path scaling","title":"Functionality","text":"","category":"section"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"near_source_saturation","category":"page"},{"location":"path_scaling/#StochasticGroundMotionSimulation.near_source_saturation","page":"Path scaling","title":"StochasticGroundMotionSimulation.near_source_saturation","text":"near_source_saturation(m, sat::NearSourceSaturationParameters)\n\nNear-source saturation term. Used to create equivalent point-source distance. Switches methods based upon sat.model.\n\nArguments\n\nOptions for sat.model are:\n\n:BT15 for Boore & Thompson (2015) finite fault factor\n:YA15 for Yenier & Atkinson (2014) finite fault factor\n:CY14 for a model fitted to the Chiou & Youngs (2014) saturation lengths (over all periods)\n:SEA21 for the Stafford et al. (2021) saturation model obtained from inversion of Chiou & Youngs (2014)\n:None for zero saturation length\n:ConstantConstrained for a constant value, sat.hconi[1], not subject to AD operations\n:ConstantVariable for a constant value, sat.hvari[1], that is subject to AD operations\n\nAny other symbol passed will return NaN.\n\nSee also: near_source_saturation\n\n\n\n\n\nnear_source_saturation(m, path::PathParameters)\n\nNear-source saturation term taking a PathParameters struct.\n\nSee also: near_source_saturation\n\n\n\n\n\nnear_source_saturation(m, fas::FourierParameters)\n\nNear-source saturation term taking a FourierParameters struct.\n\nSee also: near_source_saturation\n\n\n\n\n\n","category":"function"},{"location":"path_scaling/#Anelastic-Attenuation","page":"Path scaling","title":"Anelastic Attenuation","text":"","category":"section"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"The anelastic attenuation filter has the general form:","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"  expleft -fracpi f rQ(f) c_Q right","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"where, normally, Q(f)=Q_0 f^eta such that:","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"  expleft -fracpi f^1-eta rQ_0 c_Q right","category":"page"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"The AnelasticAttenuationParameters type therefore holds the values of Q0, eta, and c_Q. In addition, it holds a field rmetric that can take values of :Rrup and :Rps depending upon whether one wishes to interpret the distance within the exponential function as the rupture distance, :Rrup, or the equivalent point-source distance, :Rps.","category":"page"},{"location":"path_scaling/#Functionality-2","page":"Path scaling","title":"Functionality","text":"","category":"section"},{"location":"path_scaling/","page":"Path scaling","title":"Path scaling","text":"anelastic_attenuation\nfourier_attenuation\ncombined_kappa_frequency","category":"page"},{"location":"path_scaling/#StochasticGroundMotionSimulation.anelastic_attenuation","page":"Path scaling","title":"StochasticGroundMotionSimulation.anelastic_attenuation","text":"anelastic_attenuation(f::S, r::T, anelastic::AnelasticAttenuationParameters) where {S<:Float64,T<:Real}\n\nAnelastic attenuation filter, computed using equivalent point source distance metric or a standard rupture distance.\n\n\n\n\n\n","category":"function"},{"location":"path_scaling/#StochasticGroundMotionSimulation.fourier_attenuation","page":"Path scaling","title":"StochasticGroundMotionSimulation.fourier_attenuation","text":"fourier_attenuation(f::S, r::T, ane::AnelasticAttenuationParameters{U,V}, site::SiteParameters{W}) where {S<:Float64,T<:Real,U<:Real,V<:Real,W<:Real}\n\nCombined full-path attenuation, including Q(f) effects and Îº0 filter for frequency f Distance defined in terms of an equivalent point source distance r_ps or rupture distance r_rup depending upon what metric is defined in ane.rmetric\n\n\n\n\n\n","category":"function"},{"location":"path_scaling/#StochasticGroundMotionSimulation.combined_kappa_frequency","page":"Path scaling","title":"StochasticGroundMotionSimulation.combined_kappa_frequency","text":"combined_kappa_frequency(r::T, Af2target::Float64, ane::AnelasticAttenuationParameters, site::SiteParameters) where T<:Real\n\nFrequency at which the combined Îºr and Îº0 filters (squared versions) give a value of Af2target. r can be either r_ps or r_rup depending upon what matches ane.rmetric\n\n\n\n\n\n","category":"function"},{"location":"sdof_parameters/","page":"Oscillator Parameters","title":"Oscillator Parameters","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"sdof_parameters/#Single-Degree-of-Freedom-Oscillator-Parameters","page":"Oscillator Parameters","title":"Single Degree of Freedom Oscillator Parameters","text":"","category":"section"},{"location":"sdof_parameters/","page":"Oscillator Parameters","title":"Oscillator Parameters","text":"Definition of the custom type, Oscillator to represent a single degree of freedom (SDOF) oscillator. Type simply stores the oscillator frequency and damping ratio.","category":"page"},{"location":"sdof_parameters/","page":"Oscillator Parameters","title":"Oscillator Parameters","text":"  Oscillator","category":"page"},{"location":"sdof_parameters/#StochasticGroundMotionSimulation.Oscillator","page":"Oscillator Parameters","title":"StochasticGroundMotionSimulation.Oscillator","text":"Oscillator{T<:Float64}\n\nCustom type to represent a SDOF oscillator. The type has two fields:\n\nf_n is the natural frequency of the oscillator\nÎ¶_n is the damping ratio\n\nExamples\n\n    sdof = Oscillator( 1.0, 0.05 )\n\n\n\n\n\n","category":"type"},{"location":"sdof_parameters/","page":"Oscillator Parameters","title":"Oscillator Parameters","text":"##Â Functionality","category":"page"},{"location":"sdof_parameters/","page":"Oscillator Parameters","title":"Oscillator Parameters","text":"The main methods that are used to interact with Oscillator instances are:","category":"page"},{"location":"sdof_parameters/","page":"Oscillator Parameters","title":"Oscillator Parameters","text":"  period\n  transfer\n  squared_transfer","category":"page"},{"location":"sdof_parameters/#StochasticGroundMotionSimulation.period","page":"Oscillator Parameters","title":"StochasticGroundMotionSimulation.period","text":"period(sdof::Oscillator)\n\nNatural period (s) of the sdof Oscillator.\n\n\n\n\n\n","category":"function"},{"location":"sdof_parameters/#StochasticGroundMotionSimulation.transfer","page":"Oscillator Parameters","title":"StochasticGroundMotionSimulation.transfer","text":"transfer(f::T, sdof::Oscillator) where {T<:Real}\n\nCompute the modulus of the transfer function for a SDOF system.\n\nThe transfer function is defined as:\n\nH(ff_nzeta_n) = frac1sqrt left(1 - beta^2 right)^2 + left(2zeta_nbetaright)^2 \n\nwhere beta is the tuning ratio defined by ff_n.\n\nExamples\n\n    f = 2.0\n    sdof = Oscillator(1.0, 0.05)\n    Hf = transfer(f, sdof)\n\nSee also: squared_transfer\n\n\n\n\n\ntransfer(f::Vector{T}, sdof::Oscillator) where T<:Real\n\nComputes the modulus of the transfer function of a SDOF for a vector of frequencies\n\nf::Vector is the vector of frequencies\nsdof::Oscillator is the oscillator instance\n\nExamples\n\n  f = collect(range(0.1, stop=10.0, step=0.01))\n  sdof = Oscillator(1.0)\n  Hf = transfer(f, sdof)\n\n\n\n\n\n","category":"function"},{"location":"sdof_parameters/#StochasticGroundMotionSimulation.squared_transfer","page":"Oscillator Parameters","title":"StochasticGroundMotionSimulation.squared_transfer","text":"squared_transfer(f, sdof::Oscillator)\n\nCompute the square of the transfer function for a SDOF system, sdof, at frequency f.\n\nExamples\n\n\tf = 2.0\n\t# create sdof with natural frequency f_n=1.0 and damping Î¶=0.05\n\tsdof = Oscillator( 1.0, 0.05 )\n\tHf2 = squared_transfer( f, sdof )\n\nSee also: transfer\n\n\n\n\n\n","category":"function"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"fourier_parameters/#Fourier-Parameters","page":"Fourier Spectral Parameters","title":"Fourier Parameters","text":"","category":"section"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"Definition of the various custom types within the StochasticGroundMotionSimulation module. Types to store properties related to source, path, and site components of the Fourier spectral model are provided.","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"FourierParameters","category":"page"},{"location":"fourier_parameters/#StochasticGroundMotionSimulation.FourierParameters","page":"Fourier Spectral Parameters","title":"StochasticGroundMotionSimulation.FourierParameters","text":"FourierParameters\n\nCustom type for the parameters the Fourier amplitude spectrum. This type is comprised of source, path and site types, and so has a base constructor of: FourierParameters(src::S, path::T, site::U) where {S<:SourceParameters, T<:PathParameters, U<:SiteParameters}\n\nSee also: SourceParameters, PathParameters, SiteParameters\n\n\n\n\n\n","category":"type"},{"location":"fourier_parameters/#Source-Parameters","page":"Fourier Spectral Parameters","title":"Source Parameters","text":"","category":"section"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"The type SourceParameters holds the properties required to define the source spectrum of the Fourier Amplitude Spectrum.","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"SourceParameters","category":"page"},{"location":"fourier_parameters/#StochasticGroundMotionSimulation.SourceParameters","page":"Fourier Spectral Parameters","title":"StochasticGroundMotionSimulation.SourceParameters","text":"SourceParameters\n\nCustom type defining the source parameters of a Fourier spectrum.\n\nConstructed with signature SourceParameters{S<:Float64, T<:Real} with fields:\n\nÎÏ::T is the stress parameter in bars\nRÎÏ::S is the radiation pattern\nV::S is the partition factor (for splitting to horizontal components)\nF::S is the free surface factor\nÎ²::S is the source velocity in units of km/s\nÏ::S is the source density in units of t/mÂ³ or g/cmÂ³\nmodel::Symbol identifies the type of source spectrum (:Brune, :Atkinson_Silva_2000)\n\n\n\n\n\n","category":"type"},{"location":"fourier_parameters/#Path-Parameters","page":"Fourier Spectral Parameters","title":"Path Parameters","text":"","category":"section"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"The type PathParameters holds the properties required to define the path scaling of the Fourier Amplitude Spectrum.","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"PathParameters","category":"page"},{"location":"fourier_parameters/#StochasticGroundMotionSimulation.PathParameters","page":"Fourier Spectral Parameters","title":"StochasticGroundMotionSimulation.PathParameters","text":"PathParameters\n\nCustom type defining the path parameters of a Fourier spectrum. Consists of three other custom structs\n\ngeometric is a GeometricSpreadingParameters type\nsaturation is a NearSourceSaturationParameters type\nanelastic is an AnelasticAttenuationParameters type\n\nThe base constructor is: PathParameters(geo::G, sat::S, ane::A) where {G<:GeometricSpreadingParameters, S<:NearSourceSaturationParameters, A<:AnelasticAttenuationParameters}\n\nSee also: FourierParameters\n\n\n\n\n\n","category":"type"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"This type also hold instances of three other custom types that define aspects of the path scaling:","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"GeometricSpreadingParameters defined in Geometric Spreading\nNearSourceSaturationParameters defined in Near Source Saturation\nAnelasticAttenuationParameters defined in Anelastic Attenuation","category":"page"},{"location":"fourier_parameters/#Geometric-Spreading","page":"Fourier Spectral Parameters","title":"Geometric Spreading","text":"","category":"section"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"GeometricSpreadingParameters","category":"page"},{"location":"fourier_parameters/#StochasticGroundMotionSimulation.GeometricSpreadingParameters","page":"Fourier Spectral Parameters","title":"StochasticGroundMotionSimulation.GeometricSpreadingParameters","text":"GeometricSpreadingParameters\n\nStruct for geometric spreading parameters. Holds fields:\n\nRrefi are reference distances, these are <:Real but will generally be Float64 values\nÎ³coni are constant spreading rates, meaning that they will not be free for AD purposes\nÎ³vari are variable spreading rates, meaning that they can be represented as Dual numbers for AD\nÎ³free is a vector of Bool instances, or a BitVector that indicates which segments are constant or variable. Variable spreading rates are given 1 or true\nmodel is a symbol defining the type of spreading model :Piecewise, :CY14, :CY14mod\n\n\n\n\n\n","category":"type"},{"location":"fourier_parameters/#Near-Source-Saturation","page":"Fourier Spectral Parameters","title":"Near-Source Saturation","text":"","category":"section"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"Near source saturation models are represented within the NearSourceSaturationParameters type. This type can simply identify existing models that are implemented, such as:","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"Yenier & Atkinson (2015)\nBoore & Thompson (2015)\nChiou & Youngs (2014) (the average of their h(bmM) term over all periods)","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"But, specific fixed values can also be provided as well as parameters that are subsequently operated upon:","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"NearSourceSaturationParameters","category":"page"},{"location":"fourier_parameters/#StochasticGroundMotionSimulation.NearSourceSaturationParameters","page":"Fourier Spectral Parameters","title":"StochasticGroundMotionSimulation.NearSourceSaturationParameters","text":"NearSourceSaturationParameters\n\nStruct for near-source saturation parameters. Mimic structure of the GeometricSpreadingParameters struct. Holds fields:\n\nmRefi reference magnitudes\nhconi constrained coefficients, not free for AD purposes\nhvari variable coefficients, free for AD purposes\nhfree is a vector of Bool instances, or a BitVector indicating which parameters are constant or variable\nexponent is the exponent used within equivalent point-source distance calculations: r_ps = leftr_rup^n + h(m)^nright^1n\nmodel is a symbol defining the type of saturation model:\n:BT15 is Boore & Thompson (2015)\n:YA15 is Yenier & Atkinson (2015)\n:CY14 is average Chiou & Youngs (2014)\n:None returns zero saturation length\n:ConstantConstrained is a fixed saturation length not subject to AD operations\n:ConstantVariable is a fixed saturation length that is subject to AD operations (i.e., is a <:Dual)\n\n\n\n\n\n","category":"type"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"Consider defining a new saturation model that was a simply bilinear model in ln h(bmM)-bmM space.","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"We simply pass in the various parameters that would be required for our saturation model into the available fields of NearSourceSaturationParameters, and then define a custom function that operates upon these fields.","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"m_min = 3.0\nh_min = 0.5\nm_hinge = 6.0\nh_hinge = 5.0\nm_max = 8.0\nh_max = 30.0\n\nsat = NearSourceSaturationParameters([m_min, m_hinge, m_max], [h_min, h_hinge, h_max])\n\nfunction bilinear_saturation(m, sat)\n  if m <= sat.mRefi[1]\n    return sat.hconi[1]\n  elseif m <= sat.mRefi[2]\n    return sat.hconi[1] + (m - sat.mRefi[1])/(sat.mRefi[2]-sat.mRefi[1])*(sat.hconi[2] - sat.hconi[1])\n  elseif m <= sat.mRefi[3]\n    return sat.hconi[2] + (m - sat.mRefi[2])/(sat.mRefi[3]-sat.mRefi[2])*(sat.hconi[3] - sat.hconi[2])\n  else\n    return sat.hconi[3]\n  end\nend\n","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"Any subsequent calculation for a particular magnitude could then make use of this function along with a new NearSourceSaturationParameters instance that just contains a fixed saturation length.","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"m = 5.0\nh_m = bilinear_saturation(m, sat)\nnew_sat = NearSourceSaturationParameters(h_m)","category":"page"},{"location":"fourier_parameters/#Anelastic-Attenuation","page":"Fourier Spectral Parameters","title":"Anelastic Attenuation","text":"","category":"section"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"AnelasticAttenuationParameters","category":"page"},{"location":"fourier_parameters/#StochasticGroundMotionSimulation.AnelasticAttenuationParameters","page":"Fourier Spectral Parameters","title":"StochasticGroundMotionSimulation.AnelasticAttenuationParameters","text":"AnelasticAttenuationParameters\n\nStruct for anelastic attenuation parameters. Holds fields:\n\nQ0 quality factor at 1 Hz\nÎ· quality exponent â [0,1)\ncQ velocity (km/s) along propagation path used to determine Q(f)\nrmetric is a symbol :Rrup or :Rps to define which distance metric is used for anelastic attenuation\n\n\n\n\n\n","category":"type"},{"location":"fourier_parameters/#Site-Parameters","page":"Fourier Spectral Parameters","title":"Site Parameters","text":"","category":"section"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"The type SiteParameters holds information related to the site response â both impedance effects and damping.","category":"page"},{"location":"fourier_parameters/","page":"Fourier Spectral Parameters","title":"Fourier Spectral Parameters","text":"SiteParameters","category":"page"},{"location":"fourier_parameters/#StochasticGroundMotionSimulation.SiteParameters","page":"Fourier Spectral Parameters","title":"StochasticGroundMotionSimulation.SiteParameters","text":"SiteParameters\n\nCustom type defining the site parameters of a Fourier spectrum\n\nÎº0::T where T<:Real is the site kappa in units of s\nÎ¶0::T where T<:Real is the Haendel et al. (2020) Î¶ parameter (for a reference frequency of f_0=1 Hz)\nÎ·::T where T<:Real is the Haendel et al. (2020) Î· parameter\nmodel::Symbol is a symbol identifying the impedance function\n\nThe argument model is currently one of:\n\n:Unit for a generic unit amplification\n:Boore2016 for the Boore (2016) amplification for V_S30=760 m/s\n:AlAtik2021_ask14_620 for the Al Atik & Abrahamson (2021) inversion of ASK14 for V_S30=620 m/s\n:AlAtik2021_ask14_760 for the Al Atik & Abrahamson (2021) inversion of ASK14 for V_S30=760 m/s\n:AlAtik2021_ask14_1100 for the Al Atik & Abrahamson (2021) inversion of ASK14 for V_S30=1100 m/s\n:AlAtik2021_bssa14_620 for the Al Atik & Abrahamson (2021) inversion of BSSA14 for V_S30=620 m/s\n:AlAtik2021_bssa14_760 for the Al Atik & Abrahamson (2021) inversion of BSSA14 for V_S30=760 m/s\n:AlAtik2021_bssa14_1100 for the Al Atik & Abrahamson (2021) inversion of BSSA14 for V_S30=1100 m/s\n:AlAtik2021_cb14_620 for the Al Atik & Abrahamson (2021) inversion of CB14 for V_S30=620 m/s\n:AlAtik2021_cb14_760 for the Al Atik & Abrahamson (2021) inversion of CB14 for V_S30=760 m/s\n:AlAtik2021_cb14_1100 for the Al Atik & Abrahamson (2021) inversion of CB14 for V_S30=1100 m/s\n:AlAtik2021_cy14_620 for the Al Atik & Abrahamson (2021) inversion of CY14 for V_S30=620 m/s\n:AlAtik2021_cy14_760 for the Al Atik & Abrahamson (2021) inversion of CY14 for V_S30=760 m/s\n:AlAtik2021_cy14_1100 for the Al Atik & Abrahamson (2021) inversion of CY14 for V_S30=1100 m/s\n\nSee also: FourierParameters, site_amplification\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = StochasticGroundMotionSimulation","category":"page"},{"location":"#StochasticGroundMotionSimulation","page":"Home","title":"StochasticGroundMotionSimulation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for the Julia package StochasticGroundMotionSimulation.jl. The main module StochasticGroundMotionSimulation provides an interface to the stochastic method for the simulation of response spectral ordinates via Random Vibration Theory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package makes use of three main components:","category":"page"},{"location":"","page":"Home","title":"Home","text":"FourierParameters: defining the properties of the Fourier amplitude spectrum  \nRandomVibrationParameters: defining the properties of the random vibration theory calculations. Specifically, defining the duration model(s) to be used along with the peak factor method\nOscillator: defines the properties of the single degree-of-freedom oscillator for which response spectral ordinates are computed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To compute a response spectrum, or a response spectral ordinate, the above components along with a definition of a magnitude-distance scenario are required.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is written to enable automatic differentiation operations to be applied to the principle parameters defining the Fourier amplitude spectrum. This is done in order to facilitate the use of this package for gradient-based inversions of observed ground-motions, or inversions of published empirical ground-motion models.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"fourier_parameters.md\",\"random_vibration_parameters.md\",\"sdof_parameters.md]\nDepth = 4","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A number of default parameters are already set within the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using StochasticGroundMotionSimulation\n\n#Â specify some parameters defining the Fourier amplitude spectrum\nÎÏ = 100.0                  # the stress parameter (in bar)\nRrefi = [ 1.0, 50.0, Inf ]  # reference distances for the geometric spreading\nÎ³i = [ 1.0, 0.5 ]           # geometric spreading rates for distances between the references distances\nQ0 = 200.0                  # quality factor ``Q_0 \\in Q(f) = Q_0 f^\\eta``\nÎ· = 0.5                     #Â quality exponent  ``\\eta \\in Q(f) = Q_0 f^\\eta``\nÎº0 = 0.039                  # site kappa value\n\n# construct a `SourceParameters` instance\nsrc = SourceParameters(ÎÏ)\n# construct a `GeometricSpreadingParameters` instance using the reference distances, spreading rates, and spreading model\ngeo = GeometricSpreadingParameters(Rrefi, Î³i, :CY14)\n# define the near-source saturation model\nsat = NearSourceSaturationParameters(:BT15)\n# define the anelastic attenuation properties\nane = AnelasticAttenuationParameters(Q0, Î·)\n#Â use the `geo`, `sat` and `ane` instances to construct a `PathParameters` instance\npath = PathParameters(geo, sat, ane)\n#Â define the `SiteParameters`\nsite = SiteParameters(Îº0, :Boore2016)\n\n# combine `src`, `path` and `site` instances to define the overall `FourierParameters`\nfas = FourierParameters(src, path, site)\n\n# use default properties for the `RandomVibrationParameters`\nrvt = RandomVibrationParameters()\n\n# define the response period, and magnitude-distance scenario of interest\nT = 1.0\nm = 6.0\nr_rup = 10.0\n#Â compute the equivalent point-source distance for this scenario\nr_ps = equivalent_point_source_distance(r_rup, m, fas)\n\n#Â compute the response spectral ordinate\nSa = rvt_response_spectral_ordinate(T, m, r_ps, fas, rvt)\n\n# write out the results\nprintln(\"Sa = $(round(Sa, sigdigits=4)) g, for m = $m, r_rup = $r_rup km, and a period of T = $(T) s\")\n","category":"page"}]
}
